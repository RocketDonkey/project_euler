"""Project Euler - Problem 2

Each new term in the Fibonacci sequence is generated by adding the previous two
terms. By starting with 1 and 2, the first 10 terms will be:

  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed
four million, find the sum of the even-valued terms.


Proof that every number is = 4*(n-3) + (n-6):

E(n) = E(n-1) + E(n-2)
     = E(n-2) + E(n-3) + E(n-3) + E(n-4)
     = 3*E(n-3) + 2*E(n-4)
     = 3*E(n-3) + E(n-4) + E(n-5) + E(n-6)
     = 4*E(n-3) + E(n-6)

Looks like it can be used recursively but don't think it will save any time.

"""

import timeit


def BetterAnswer(n):
  """Suggests recursion. 4*E(n-3) + E(n-6)."""
  pass


def MyAnswer(n):
  """Every third number is even."""
  s = 0
  p_prev = 1
  prev = 1
  num = p_prev + prev
  while num < n:
    s += num
    p_prev = prev + num
    prev = num + p_prev
    num = p_prev + prev
  return s


def main():
  print MyAnswer(4000000)
  mine = timeit.Timer(lambda: MyAnswer(4000000))
  my_time = mine.timeit(number=1000)
  print 'My time: {0}'.format(my_time)


if __name__ == '__main__':
  main()
